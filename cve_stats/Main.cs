using System;
using System.Linq;
using System.Collections.Generic;
using System.Xml;

namespace cve_stats
{
	class MainClass
	{
		public static void Main (string[] args)
		{
			Dictionary<string, string[]> cweDefs = new Dictionary<string, string[]>();
			
			//cwe == common weakness enumeration
			cweDefs.Add("CWE-287", new string[] { "Authentication Issues", "Failure to properly authenticate users." });
			cweDefs.Add("CWE-255", new string[] { "Credentials Management", "Failure to properly create, store, transmit, or protect passwords and other credentials." });
			cweDefs.Add("CWE-264", new string[] { "Permissions, Privileges, and Access Control", "Failure to enforce permissions or other access restrictions for resources, or a privilege management system." });
			cweDefs.Add("CWE-119", new string[] { "Buffer Errors", "Buffer overflows and other buffer boundary errors in which a program attempts to put more data in a buffer than the buffer can hold, or when a program attempts to put data in a memory area outside of the boundaries of the buffer." });
			cweDefs.Add("CWE-352", new string[] { "Cross-Site Request Forgery (CSRF)", "Failure to verify that the sender of a web request actually intended to do so. CSRF attacks can be launched by sending a formatted request to a victim, then tricking the victim into loading the request (often automatically), which makes it appear that the request came from the victim. CSRF is often associated with XSS, but it is a distinct issue." });
			cweDefs.Add("CWE-79", new string[] { "Cross-Site Scripting", "Failure of a site to validate, filter, or encode user input before returning it to another user’s web client." });
			cweDefs.Add("CWE-310", new string[] { "Cryptographic Issues", "An insecure algorithm or the inappropriate use of one; an incorrect implementation of an algorithm that reduces security; the lack of encryption (plaintext); also, weak key or certificate management, key disclosure, random number generator problems."});
			cweDefs.Add("CWE-22", new string[] { "Path Traversal",  "When user-supplied input can contain “..” or similar characters that are passed through to file access APIs, causing access to files outside of an intended subdirectory."});
			cweDefs.Add("CWE-94", new string[] { "Code Injection", "Causing a system to read an attacker-controlled file and execute arbitrary code within that file. Includes PHP remote file inclusion, uploading of files with executable extensions, insertion of code into executable files, and others."});
			cweDefs.Add("CWE-134", new string[] { "Format String Vulnerability", "The use of attacker-controlled input as the format string parameter in certain functions."});
			cweDefs.Add("CWE-16", new string[] { "Configuration", "A general configuration problem that is not associated with passwords or permissions."});
			cweDefs.Add("CWE-200", new string[] { "Information Leak / Disclosure", "Exposure of system information, sensitive or private information, fingerprinting, etc."});
			cweDefs.Add("CWE-20", new string[] { "Input Validation", "Failure to ensure that input contains well-formed, valid data that conforms to the application’s specifications. Note: this overlaps other categories like XSS, Numeric Errors, and SQL Injection."});
			cweDefs.Add("CWE-189", new string[] { "Numeric Errors", "Integer overflow, signedness, truncation, underflow, and other errors that can occur when handling numbers."});
			cweDefs.Add("CWE-78", new string[] { "OS Command Injections", "Allowing user-controlled input to be injected into command lines that are created to invoke other programs, using system() or similar functions."});
			cweDefs.Add("CWE-362", new string[] { "Race Conditions", "The state of a resource can change between the time the resource is checked to when it is accessed."});
			cweDefs.Add("CWE-399", new string[] { "Resource Management Errors", "The software allows attackers to consume excess resources, such as memory exhaustion from memory leaks, CPU consumption from infinite loops, disk space consumption, etc."});
			cweDefs.Add("CWE-89", new string[] { "SQL Injection", "When user input can be embedded into SQL statements without proper filtering or quoting, leading to modification of query logic or execution of SQL commands."});
			cweDefs.Add("CWE-59", new string[] { "Link Following",	"Failure to protect against the use of symbolic or hard links that can point to files that are not intended to be accessed by the application."});
					
			List<string> files = new List<string>();
			
			files.Add("/home/bperry/Downloads/nvdcve-2.0-2002.xml");
			files.Add("/home/bperry/Downloads/nvdcve-2.0-2003.xml");
			files.Add("/home/bperry/Downloads/nvdcve-2.0-2004.xml");
			files.Add("/home/bperry/Downloads/nvdcve-2.0-2005.xml");
			files.Add("/home/bperry/Downloads/nvdcve-2.0-2006.xml");
			files.Add("/home/bperry/Downloads/nvdcve-2.0-2007.xml");
			files.Add("/home/bperry/Downloads/nvdcve-2.0-2008.xml");
			files.Add("/home/bperry/Downloads/nvdcve-2.0-2009.xml");
			files.Add("/home/bperry/Downloads/nvdcve-2.0-2010.xml");
			files.Add("/home/bperry/Downloads/nvdcve-2.0-2011.xml");
			
			List<NVD> nvds = new List<NVD>();
			
			//we are loading all the nvds into a list
			foreach (string file in files)
			{
				string xml = System.IO.File.ReadAllText(file);
				
				XmlDocument doc = new XmlDocument();
				doc.LoadXml(xml);
				
				Console.WriteLine("Snarfing up " + file);
				foreach (XmlNode node in doc.LastChild)
					nvds.Add(new NVD(node));
			}
			
			
			for(int year = 2001;year <=2011;year++)
			{
				int total = nvds.Where(nvd => nvd.CVEID.StartsWith("CVE-" + year)).Count();
				Console.WriteLine(String.Format("\n\nYear {0} has {1} vulnerabilities", year, total));
				
				Dictionary<string, int> cwes = new Dictionary<string, int>();
				
				foreach (var pair in cweDefs)
					cwes.Add(pair.Key, nvds.Where(nvd => nvd.CVEID.StartsWith("CVE-" + year) &&  nvd.CWE == pair.Key).Count());
				
				int cweTotal = 0;
				foreach (var pair in cwes.OrderByDescending(pair => pair.Value))
				{
					cweTotal += pair.Value;
					Console.WriteLine(String.Format("{0} had {1} vulns of type:\t {2}", year, pair.Value, cweDefs[pair.Key][0]));
				}
				
				NVD mostAffected = nvds.Where(nvd => nvd.CVEID.StartsWith("CVE-" + year)).OrderByDescending(nvd => nvd.NumberOfVulnerableSoftware).First();
				
				Console.WriteLine("Most software affected by single vulnerability: " + mostAffected.NumberOfVulnerableSoftware + " (" + mostAffected.CVEID + ")"); 
				Console.WriteLine("Total vulns in " + year + " with CWE:\t" + cweTotal);
				Console.WriteLine("Percentage of vulns with CWE:\t" + (((double)cweTotal/(double)total)*100) + "%\n");
			}
			
			Console.WriteLine("Total: " + nvds.Count);
		}
	}
	
	//poco :)
	public class NVD
	{
		int _noVulnSoftware = 0;
		
		public NVD(XmlNode node)
		{
			foreach (XmlNode child in node.ChildNodes)
			{
				if (child.Name == "vuln:vulnerable-software-list")
				{
					foreach (XmlNode c in child.ChildNodes)
						_noVulnSoftware++;
				}
				else if (child.Name == "vuln:cve-id")
					this.CVEID = child.InnerText.ToUpper();
				else if (child.Name == "vuln:cvss")
				{
					foreach (XmlNode c in child.FirstChild.ChildNodes)
					{
						if (c.Name == "cvss:score")
							this.CVSSScore = double.Parse(c.InnerText);
						else if (c.Name == "cvss:access-vector")
							this.AccessVector = c.InnerText;
						else if (c.Name == "cvss:access-complexity")
							this.AccessComplexity = c.InnerText;
						else if (c.Name == "cvss:authentication")
							this.Authentication = c.InnerText;
						else if (c.Name == "cvss:confidentiality-impact")
							this.ConfidentialityImpact = c.InnerText;
						else if (c.Name == "cvss:integrity-impact")
							this.IntegrityImpact = c.InnerText;
						else if (c.Name == "cvss:availability-impact")
							this.AvailabilityImpact = c.InnerText;
					}
				}
				else if (child.Name == "vuln:cwe")
					this.CWE = child.Attributes["id"].Value;
			}
		}
		
		public string CVEID { get; set; }
		
		public int NumberOfVulnerableSoftware { get { return _noVulnSoftware; }}
		
		public double CVSSScore { get; set; }
		
		public string AccessVector { get; set; }
		
		public string AccessComplexity { get; set; }
		
		public string Authentication { get; set; }
		
		public string ConfidentialityImpact { get; set; }
		
		public string IntegrityImpact { get; set; }
		
		public string AvailabilityImpact { get; set; }
		
		public string CWE { get; set; }
	}
}
